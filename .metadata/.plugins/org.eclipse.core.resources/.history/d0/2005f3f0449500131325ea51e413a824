package com.pillar;
import org.andengine.engine.options.EngineOptions;
import org.andengine.engine.options.ScreenOrientation;
import org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.util.FPSLogger;
import org.andengine.ui.activity.SimpleBaseGameActivity;

import android.util.DisplayMetrics;
import android.util.Log;


public class GameActivity extends SimpleBaseGameActivity {
	
	private GameController gameController;
	
	public GameActivity() {
		super();
		this.gameController = new GameController();
	}

	@Override
	public EngineOptions onCreateEngineOptions() {
		// 依螢幕縮放至最大, 不變形
		DisplayMetrics dm = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(dm);
		float windowW = dm.widthPixels;
		float windowH = dm.heightPixels;
		if (windowW / GameController.CAM_WIDTH > windowH / GameController.CAM_HEIGHT)
			windowW = GameController.CAM_WIDTH * windowH / GameController.CAM_HEIGHT;
		else
			windowH = GameController.CAM_HEIGHT * windowW / GameController.CAM_WIDTH;
		return new EngineOptions(true, ScreenOrientation.PORTRAIT_SENSOR, new RatioResolutionPolicy(windowW, windowH), this.gameController.getSmoothCamera());
	}

	@Override
	protected void onCreateResources() {
		// TODO Auto-generated method stub

	}

	@Override
	protected Scene onCreateScene() {
		this.gameController.setEngine(engine);
		this.mEngine.registerUpdateHandler(new FPSLogger());
		this.gameController.setVertexBufferObjectManager(this.getVertexBufferObjectManager());
		this.gameController.setTextureManager(this.getTextureManager());
		this.gameController.setFontManager(this.getFontManager());
		this.gameController.initScene();
		return this.gameController.getScene();
	}

}
