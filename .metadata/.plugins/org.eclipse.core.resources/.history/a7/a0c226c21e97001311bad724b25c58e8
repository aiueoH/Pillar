package com.pillar;

import java.text.DecimalFormat;

public class BrickManager implements IBrickOwner{

	@Override
	public void onBrickMovedDown(Brick brick) {
		if (hasNoiseBrick())
			_completeText.setText(new DecimalFormat("#.##").format(calcCompleteRate()) + "%");
		else
			_completeText.setText("Complete " + new DecimalFormat("#.##").format(calcCompleteRate()) + "% !!");
		float x = _completeText.getWidth() / 2, y = _camera.getHeight() - _completeText.getHeight() / 2;
		_completeText.setPosition(x, y);
		chaseBrickAtBottom(_bricks.get(_bottomBrickIndex));
	}
	
	@Override
	public void onBrickMovedOut(final Brick brick) {
		int i = _bricks.indexOf(brick);
		deleteBrick(brick);
		moveDownBricks(i);
	}

	@Override
	public void onBrickTouchedUp(Brick brick) {
		/*
		 * if (有連線) {
		 *     找到目標 bottomBrick 並設定 bottomBrickIndex
		 *     將 bottomBrick 以下 brick 設定為無法 touch
		 * }
		 */
		{
			int b = findBottomBrickIndex();
			setBricksIsTouchable(_bottomBrickIndex, b - _bottomBrickIndex, false);
			_bottomBrickIndex = b;
		}
		if (!hasNoiseBrick()) {
			_barTimer.pause();
//			freezeBricks();
		}
	}
	
	private boolean hasNoiseBrick() {
		for (Brick b : _bricks)
			if (b instanceof NoiseBrick && !b.getIsMovingOut())
				return true;
		return false;
	}

}