package com.pillar;

import java.util.ArrayList;

import org.andengine.engine.handler.timer.ITimerCallback;
import org.andengine.engine.handler.timer.TimerHandler;
import org.andengine.entity.Entity;
import org.andengine.entity.primitive.Line;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.opengl.vbo.VertexBufferObjectManager;
import org.andengine.util.adt.color.Color;

import android.R.integer;
import android.util.Log;

public class BarTimer extends Rectangle {

	
	private float _x, _y, _width, _height;
	private float _duration, _time;
	private float _interval;
	
	private boolean _isPause;
	
	private Line[] _borderLines = new Line[4];
	private Rectangle _bar;
	private TimerHandler _timerHandler;
	private IBarTimerOwner _barTimerOwner;
	
	public BarTimer(float x, float y, float width, float height, 
			float boderWidth, 
			Color barColor, Color borderColor, 
			float duration,
			float interval,
			VertexBufferObjectManager vertexBufferObjectManager, 
			IBarTimerOwner barTimerOwner) {
		super(x, y, width, height, vertexBufferObjectManager);
		this._isPause = false;
		this.setColor(Color.TRANSPARENT);
		this._x = x;
		this._y = y;
		this._width = width;
		this._height = height;
		this._time = this._duration = duration;
		this._interval = interval;
		this._barTimerOwner = barTimerOwner;
		this._bar = new Rectangle(x, y, width, height, vertexBufferObjectManager);
		this._bar.setColor(barColor);
		this.attachChild(this._bar);
		{
			float cX[] = {x - width / 2, x + width / 2};
			float cY[] = {y + height / 2, y - height / 2};
			this._borderLines[0] = new Line(cX[0], cY[0], cX[1], cY[0], boderWidth, vertexBufferObjectManager);
			this._borderLines[1] = new Line(cX[1], cY[0], cX[1], cY[1], boderWidth, vertexBufferObjectManager);
			this._borderLines[2] = new Line(cX[1], cY[1], cX[0], cY[1], boderWidth, vertexBufferObjectManager);
			this._borderLines[3] = new Line(cX[0], cY[1], cX[0], cY[0], boderWidth, vertexBufferObjectManager);
		}
		for (Line line : this._borderLines) {
			line.setColor(borderColor);
			this.attachChild(line);
		}
		final BarTimer thisBarTimer = this;
		this._timerHandler = new TimerHandler(interval, true, new ITimerCallback() {
			@Override
			public void onTimePassed(TimerHandler timerHandler) {
				if (!_isPause) {
					if (thisBarTimer._time > 0) {
						thisBarTimer._time -= thisBarTimer._interval;
						float p = thisBarTimer._time / thisBarTimer._duration;
						thisBarTimer._bar.setHeight(thisBarTimer._height * p);
						thisBarTimer._bar.setY(thisBarTimer._y - thisBarTimer._height / 2 + thisBarTimer._bar.getHeight() / 2);
					} else {
						timerHandler.setAutoReset(false);
						thisBarTimer._barTimerOwner.onTimesUp(timerHandler);
					}
				}
			}
		});
	}
	
	public void pause() {
		this._isPause = true;
	}
	
	public void setPercent(float n) {
		this._bar.setY(this._x + (1f - n) * this._height);
		this._bar.setHeight(n * this._height);
	}

	public TimerHandler getTimerHandler() {
		return this._timerHandler;
	}
	
}
