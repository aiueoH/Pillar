package com.pillar;

import org.andengine.entity.IEntity;
import org.andengine.entity.modifier.IEntityModifier.IEntityModifierListener;
import org.andengine.entity.modifier.MoveXModifier;
import org.andengine.entity.modifier.MoveYModifier;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.entity.sprite.AnimatedSprite;
import org.andengine.input.touch.TouchEvent;
import org.andengine.opengl.texture.region.TiledTextureRegion;
import org.andengine.opengl.vbo.VertexBufferObjectManager;
import org.andengine.util.modifier.IModifier;

import android.R.bool;
import android.R.integer;

public abstract class Brick extends AnimatedSprite {
	
	public static final float DEFAULT_WIDTH = 200, DEFAULT_HEIGHT = 100;
	public static final float MOVEDOWN_DURATION = 0.1f;
	public static final float MOVEOUT_DURATION = 0.05f;
	
	private IBrickOwner brickOwner;
	private float destinationY;
	private boolean isTouchable;
	
	public Brick(float pX, float pY, 
			TiledTextureRegion textureRegion,
			VertexBufferObjectManager pVertexBufferObjectManager, 
			IBrickOwner brickOwner) {
		super(pX, pY, textureRegion, pVertexBufferObjectManager);
		this.isTouchable = true;
		this.brickOwner = brickOwner;
		this.destinationY = pY;
		this.setCullingEnabled(true);
	}
	
	public void moveDown() {
		this.destinationY += Brick.DEFAULT_HEIGHT;
		this.clearEntityModifiers();
		final Brick b = this;
		this.registerEntityModifier(new MoveYModifier(MOVEDOWN_DURATION, this.getY(), this.destinationY, new IEntityModifierListener() {
			@Override
			public void onModifierStarted(IModifier<IEntity> pModifier, IEntity pItem) {
			}
			@Override
			public void onModifierFinished(IModifier<IEntity> pModifier, IEntity pItem) {
				b.brickOwner.onBrickMovedDown(b);
			}
		}));
	}
	
	public void moveOut() {
		this.clearEntityModifiers();
		final Brick b = this;
		this.registerEntityModifier(new MoveXModifier(MOVEOUT_DURATION, this.getX(), this.getX() + (this.getWidth() + GameController.CAM_WIDTH) / 2f, new IEntityModifierListener() {
			@Override
			public void onModifierStarted(IModifier<IEntity> pModifier, IEntity pItem) {
			}
			@Override
			public void onModifierFinished(IModifier<IEntity> pModifier, IEntity pItem) {
				b.brickOwner.onBrickMovedOut(b);
			}
		}));
	}
	
	public boolean beContained(float xMin, float xMax, float yMin, float yMax) {
		return isInRect(xMin, xMax, yMin, yMax, this.getX(), this.getY()) ||
				isInRect(xMin, xMax, yMin, yMax, this.getX() + this.getWidth(), this.getY()) ||
				isInRect(xMin, xMax, yMin, yMax, this.getX(), this.getY() + this.getHeight()) ||
				isInRect(xMin, xMax, yMin, yMax, this.getX() + this.getWidth(), this.getY() + this.getHeight());
	}
	
	private boolean isInRect(float xMin, float xMax, float yMin, float yMax, float x, float y) {
		return (x >= xMin && x <= xMax && y >= yMin && y <= yMax) ? true : false; 
	}
	
	public void setIsTouchable(boolean b) {
		this.isTouchable = b;
	}
	
	@Override
	public boolean onAreaTouched(TouchEvent pSceneTouchEvent, float X, float Y) 
    {
		if (this.isTouchable)
			if (pSceneTouchEvent.isActionUp()) {
				moveOut();
				this.brickOwner.onBrickTouchedUp(this);
			}
        return true;
    };
}
