package com.pillar;

import org.andengine.entity.IEntity;
import org.andengine.entity.modifier.IEntityModifier.IEntityModifierListener;
import org.andengine.entity.modifier.MoveYModifier;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.input.touch.TouchEvent;
import org.andengine.opengl.vbo.VertexBufferObjectManager;
import org.andengine.util.modifier.IModifier;

public abstract class Brick extends Rectangle implements IEntityModifierListener{
	
	public static final float DEFAULT_WIDTH = 300, DEFAULT_HEIGHT = 100;
	public static final float DEFAULT_MOVEDOWN_DURATION = 0.1f;
	
	private IBrickOwner brickOwner;
	private float destinationY;
	
	public Brick(float pX, float pY, 
			VertexBufferObjectManager pVertexBufferObjectManager, 
			IBrickOwner brickOwner) {
		super(pX, pY, DEFAULT_WIDTH, DEFAULT_HEIGHT, pVertexBufferObjectManager);
		this.brickOwner = brickOwner;
		this.destinationY = pY;
		this.setCullingEnabled(true);
	}
	
	public void moveDown() {
		this.destinationY += Brick.DEFAULT_HEIGHT;
		this.clearEntityModifiers();
		this.registerEntityModifier(new MoveYModifier(DEFAULT_MOVEDOWN_DURATION, this.getY(), this.destinationY, this));
	}
	
	public boolean beContained(float xMin, float xMax, float yMin, float yMax) {
		return isInRect(xMin, xMax, yMin, yMax, this.getX(), this.getY()) ||
				isInRect(xMin, xMax, yMin, yMax, this.getX() + this.getWidth(), this.getY()) ||
				isInRect(xMin, xMax, yMin, yMax, this.getX(), this.getY() + this.getHeight()) ||
				isInRect(xMin, xMax, yMin, yMax, this.getX() + this.getWidth(), this.getY() + this.getHeight());
	}
	
	private boolean isInRect(float xMin, float xMax, float yMin, float yMax, float x, float y) {
		return (x >= xMin && x <= xMax && y >= yMin && y <= yMax) ? true : false; 
	}
	
	@Override
	public boolean onAreaTouched(TouchEvent pSceneTouchEvent, float X, float Y) 
    {
		if (pSceneTouchEvent.isActionDown()) {
		} else if (pSceneTouchEvent.isActionUp()) {
			this.brickOwner.onBrickBreaking(this);
		} else if (pSceneTouchEvent.isActionMove()) {
		}
        return true;
    };

	@Override
	public void onModifierStarted(IModifier<IEntity> pModifier, IEntity pItem) {
	}

	@Override
	public void onModifierFinished(IModifier<IEntity> pModifier, IEntity pItem) {
		this.brickOwner.onBrickMoveDownFinished(this);
	}
}
